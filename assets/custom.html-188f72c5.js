import{_ as o,a as l,b as c,c as p,d as r}from"./customQueryCalendar-5423f38d.js";import{_ as i,M as u,p as d,q as _,R as e,t as n,N as a,a1 as t}from"./framework-204010b2.js";const h={},k=e("h1",{id:"一般自定义日历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一般自定义日历","aria-hidden":"true"},"#"),n(" 一般自定义日历")],-1),m=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"TIP"),e("p",null,"一般自定义日历依据 query 收集事件并显示到日历上")],-1),g=e("p",null,"当我们新建一个自定义日历后, 行为同 journal 默认日历, 但是查找范围变为了自定义日历 id 指定的页面",-1),b=e("blockquote",null,[e("p",null,"所有日历的 query 都是开放可修改的, 你可以根据需求自己定制")],-1),y=e("p",null,"那么如何定制玩去属于自己的日历呢?",-1),f={href:"https://logseq.github.io/#/page/Queries",target:"_blank",rel:"noopener noreferrer"},v={href:"https://logseq.github.io/plugins/interfaces/IDBProxy.html#datascriptQuery",target:"_blank",rel:"noopener noreferrer"},q={href:"https://logseq.github.io/plugins/interfaces/IDBProxy.html#q",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,"让我来解释一下有哪些配置项:",-1),Q=e("li",null,[e("code",null,"script"),n(": 作为 datascriptQuery 的参数, 查询所有符合要求的 block")],-1),B=e("code",null,"query type",-1),I={href:"https://logseq.github.io/#/page/Queries",target:"_blank",rel:"noopener noreferrer"},D={href:"https://logseq.github.io/#/page/AdvancedQueries",target:"_blank",rel:"noopener noreferrer"},N=e("li",null,[e("code",null,"schedule start"),n(": 从 datascriptQuery 查询的 block 取出 "),e("code",null,"schedule start"),n(" 指定的字段作为事件开始时间")],-1),j=e("li",null,[e("code",null,"schedule end"),n(": 从 datascriptQuery 查询的 block 取出 "),e("code",null,"schedule end"),n(" 指定的字段作为事件结束时间")],-1),w=e("code",null,"date formatter",-1),P={href:"https://date-fns.org/v2.28.0/docs/parse",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"schedule start",-1),V=e("code",null,"schedule end",-1),A=e("li",null,[e("code",null,"is milestone"),n(": 是否是里程碑, 如果是, 则会展示在日历的 Milestone 中")],-1),E=t('<p>如果你不知道如何填写 <code>schedule start</code> <code>schedule end</code>, 可以打开控制台, 然后点击 play 按钮:</p><p><img src="'+l+'" alt="queryDebug"></p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例:</h2><p>当前我们有一个 test-agenda 的笔记:</p><p>其中 custom calendar demo 具有 <code>start</code> <code>end</code> 属性, 我们想让它显示在日历中,而 common text 不显示.</p><p><img src="'+c+'" alt="test-agenda"></p>',6),C={id:"方法一-使用-simple-query",tabindex:"-1"},L=e("a",{class:"header-anchor",href:"#方法一-使用-simple-query","aria-hidden":"true"},"#",-1),M={href:"https://logseq.github.io/#/page/Queries",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,"我们使用如下 query script 查询位于 test-agenda 页面中的 block:",-1),R=e("p",null,[e("code",null,'(and (page "test-agenda") (property end) (property start))')],-1),z=e("p",null,[e("img",{src:o,alt:"customQuerySimple"})],-1),F={id:"方法二-使用-advanced-query",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#方法二-使用-advanced-query","aria-hidden":"true"},"#",-1),H={href:"https://logseq.github.io/#/page/advanced%20queries",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>如果你更喜欢advanced query, 配置如下:</p><div class="language-clojure line-numbers-mode" data-ext="clojure"><pre class="language-clojure"><code><span class="token punctuation">[</span><span class="token symbol">:find</span> <span class="token punctuation">(</span><span class="token function">pull</span> ?block <span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token symbol">:where</span>
  <span class="token punctuation">[</span>?block <span class="token symbol">:block/properties</span> ?p<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">get</span> ?p <span class="token symbol">:start</span><span class="token punctuation">)</span> ?s<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">get</span> ?p <span class="token symbol">:end</span><span class="token punctuation">)</span> ?e<span class="token punctuation">]</span>
  <span class="token punctuation">[</span>?page <span class="token symbol">:block/name</span> ?pname<span class="token punctuation">]</span>
  <span class="token punctuation">[</span>?block <span class="token symbol">:block/page</span> ?page<span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">contains?</span> <span class="token operator">#</span><span class="token punctuation">{</span><span class="token string">&quot;test-agenda&quot;</span><span class="token punctuation">}</span> ?pname<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整配置如下图:</p><p><img src="`+p+'" alt="customQuery"></p><p>以上两种方式是等效的,最终日历中会显示以下内容:</p><p><img src="'+r+'" alt="customCalendar"></p>',6);function K(O,U){const s=u("ExternalLinkIcon");return d(),_("div",null,[k,m,g,b,y,e("p",null,[n("答案是新建日历,然后修改 "),e("a",f,[n("query"),a(s)])]),e("p",null,[n("插件会以填写的 query script 作为参数调用"),e("a",v,[n("logseq.DB.datascriptQuery"),a(s)]),n(" 或 "),e("a",q,[n("logseq.DB.q"),a(s)]),n("API, 然后将结果展示在日历中.")]),x,e("ol",null,[Q,e("li",null,[B,n(": query 的类型, 可以是 "),e("a",I,[n("Simple Query"),a(s)]),n(" 或 "),e("a",D,[n("Advanced Query"),a(s)])]),N,j,e("li",null,[w,n(": 日期格式, 以此为参数使用 "),e("a",P,[n("date-fns"),a(s)]),n(" 将 "),S,n(),V,n(" 转换为可用的日期")]),A]),E,e("h3",C,[L,n(" 方法一: 使用 "),e("a",M,[n("Simple Query"),a(s)])]),T,R,z,e("h3",F,[G,n(" 方法二: 使用 "),e("a",H,[n("advanced query"),a(s)])]),J])}const Y=i(h,[["render",K],["__file","custom.html.vue"]]);export{Y as default};
